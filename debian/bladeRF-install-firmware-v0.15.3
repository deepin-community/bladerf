#!/bin/sh
#
# Title      :	bladeRF-install-firmware
# Purpose    :  fetch non-free BladeRF firmware
# Author     :	A. Maitland Bottoms <bottoms@debian.org>
# Date       :	2013-10-10
# Update     :	2021-11-20
#
# Copyright 2013-2021 A. Maitland Bottoms <bottoms@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

set -e

show_usage()
{
    echo "Usage: $0 [-i imagedir] [imagetarball]" >&2
    exit 1
}

FX3UPSTREAM='https://www.nuand.com/fx3/bladeRF_fw_v2.4.0.img'
FX3CHECKSUM='337f570f2e3fdb26abde0f0765196d92'
FX3SHA256SUM='670d1ca7aa1c6007eb09900351c3aa997e4be316dbc0a2fc1532a908d02cc0a9'
FX3IMGFILE='/usr/share/Nuand/bladeRF/bladeRF_fw.img'

FPGAWLANXA9STREAM='https://www.nuand.com/fpga/v0.15.3/wlanxA9.rbf'
FPGAWLANXA9CHECKSUM='fb1dc76308b64ffe5f2a4146e44c7b79'
FPGAWLANXA9SHA256SUM='9f1fd747561a77f5f23e5d80785f161a4fb01c3f849f87a9fc309590d73c09bf'
FPGAWLANXA9RBFILE='/usr/share/Nuand/bladeRF/wlanxA9.rbf'

FPGA115UPSTREAM='https://www.nuand.com/fpga/v0.15.3/hostedx115.rbf'
FPGA115CHECKSUM='af5c14eaae08055ca4c65e35953fa772'
FPGA115SHA256SUM='be516bf24451f05f55d75eb9fdcd07a076d443a50e0442927038061ca0563cea'
FPGA115RBFFILE='/usr/share/Nuand/bladeRF/hostedx115.rbf'

FPGA40UPSTREAM='https://www.nuand.com/fpga/v0.15.3/hostedx40.rbf'
FPGA40CHECKSUM='7ca3c83ef861d3917f79732af6d0bdb1'
FPGA40SHA256SUM='8e3a168b5fe3496ff3167199b11dd66e4047789459526ed91acfbdc838bb4176'
FPGA40RBFFILE='/usr/share/Nuand/bladeRF/hostedx40.rbf'

FPGAA4UPSTREAM='https://www.nuand.com/fpga/v0.15.3/hostedxA4.rbf'
FPGAA4CHECKSUM='ad2bab66abc6b8711ac6d16b278e1067'
FPGAA4SHA256SUM='eaa415650b6b00e75f1e28c2a860d8f90577b1f4648b2f7b88a65745f464a6db'
FPGAA4RBFFILE='/usr/share/Nuand/bladeRF/hostedxA4.rbf'

FPGAA5UPSTREAM='https://www.nuand.com/fpga/v0.15.3/hostedxA5.rbf'
FPGAA5CHECKSUM='5049e5f25a4d3ae14e9bfe30d390f591'
FPGAA5SHA256SUM='d02d07778dfec9b02447aec174c830a5d178448807bdd56830e7da7fceacf5aa'
FPGAA5RBFFILE='/usr/share/Nuand/bladeRF/hostedxA5.rbf'

FPGAA9UPSTREAM='https://www.nuand.com/fpga/v0.15.3/hostedxA9.rbf'
FPGAA9CHECKSUM='e74607d277e3d86ea2d7a4d119a77528'
FPGASHA256SUM='3222349aea26a304a0ecd31858cb3ae032f39ec49b81b2ee9c8a4c9ea1b8f4e7'
FPGAA9RBFFILE='/usr/share/Nuand/bladeRF/hostedxA9.rbf'

ADSBA4UPSTREAM='https://www.nuand.com/fpga/adsbxA4.rbf'
ADSBA4CHECKSUM='2fe523c4c3f62100a19eab1446676f39'
ADSBA4SHA256SUM='e3ef41920c148f34990a16a6d9614a4f1632391ee5ed05f16149dd82c5367d14'
ADSBA4RBFFILE='/usr/share/Nuand/bladeRF/adsbxA4.rbf'

ADSBA9UPSTREAM='https://www.nuand.com/fpga/adsbxA9.rbf'
ADSBA9CHECKSUM='4526ef899fef566619625982fdc5cfb4'
ADSBA9SHA256SUM='b1e1be9228f2b6629f49dd357b5c5e65b5c3c581e6769e9abd341639617ca212'
ADSBA9RBFFILE='/usr/share/Nuand/bladeRF/adsbxA9.rbf'

ADSB40UPSTREAM='https://www.nuand.com/fpga/adsbx40.rbf'
ADSB40CHECKSUM='5c6045066ac2e62c8a2c3e770c6c355c'
ADSB40SHA256SUM='2801df76b13b243d3b4a211f39841326fbbdf8e4656c61761b814ef5386a6a08'
ADSB40RBFFILE='/usr/share/Nuand/bladeRF/adsbx40.rbf'

ADSB115UPSTREAM='https://www.nuand.com/fpga/adsbx115.rbf'
ADSB115CHECKSUM='178f1d952be3a05f2f0a4a0e9429746a'
ADSB115SHA256SUM='e5ff37596f6d46ca9124001bde73237a85c435024963c911658b922e6e960142'
ADSB115RBFFILE='/usr/share/Nuand/bladeRF/adsbx115.rbf'

# Default values:
# The imagedir is the path bladerf-host and libbladerf packages
# use to find firmware.
imagedir="/usr/share/Nuand/bladeRF"
# The imagetarball is the source of firmware built with matching
# source code.
fpgaimageurl=""
usbimageurl=""
while [ "$1" != "" ]; do
    case $1 in
        -h | --help )           show_usage
                                exit 0
                                ;;
        -i | --imagedir )       shift
	                        imagedir=$1
                                ;;
        -f | --fpgafile )       shift
                                fpgaimageurl=$1
                                ;;
        -u | --usbfile )        shift
                                usbimageurl=$1
                                ;;
        * )                     fpgaimageurl=$1
                                ;;
    esac
    shift
done

if mkdir -p $imagedir ; then
    if [ -w $imagedir ] ;then
	echo Using imagedir: $imagedir
    else
	echo You need to run this script as a user who can write to $imagedir
	exit 1
    fi
else
    echo You need to run this script as a user who can create $imagedir
    exit 1
fi

tdir=`mktemp -d`
fetchlist=""
echo "Using tempdir:" $tdir
if [ "x$fpgaimageurl" = "x" ] && [ "x$usbimageurl" = "x" ] ; then
    fetchlist="$FX3UPSTREAM $FPGA40UPSTREAM $FPGA115UPSTREAM $FPGAA4UPSTREAM $FPGAA5UPSTREAM $FPGAA9UPSTREAM \
    			    $ADSB40UPSTREAM $ADSB115UPSTREAM $ADSBA4UPSTREAM $ADSBA9UPSTREAM"
else
    if [ "x$fpgaimageurl" != "x" ] ; then
	fetchlist="$fetchlist $fpgaimageurl"
    fi
    if [ "x$usbimageurl" != "x" ] ; then
	fetchlist="$fetchlist $usbimageurl"
    fi
fi

for item in $fetchlist; do
echo "Using: " $item

# if URL, fetch it first
    if echo $item | grep -q :// ; then
	echo Fetching $item ;
	if [ -x /usr/bin/wget ] ; then
	    /usr/bin/wget --user-agent="Debian BladeRF image installer" -O $tdir/`basename $item` $item
	else
	    curl --user-agent "Debian BladeRF image installer" -o $tdir/`basename $item` $item
	fi
    else
	if [ -f $item ] ; then
	    echo Copying $item
	    cp -p $item $tdir/
	else
	    echo "Cannot find" $item;
	    show_usage
	    exit 1
	fi
    fi;
    if [ `basename $item` = "bladeRF_fw_v2.4.0.img" ] ; then
	md5sum --check - <<- EOF
$FX3CHECKSUM  $tdir/`basename $item`
EOF
	sha256sum --check - <<- EOF
$FX3SHA256SUM  $tdir/`basename $item`
EOF
	cp -p $tdir/`basename $item` $imagedir/bladeRF_fw.img ;
    fi
    if [ `basename $item` = "hostedx40.rbf" ] ; then
	md5sum --check - <<- EOF
$FPGA40CHECKSUM  $tdir/`basename $item`
EOF
	sha256sum --check - <<- EOF
$FPGA40SHA256SUM  $tdir/`basename $item`
EOF
    fi
    if [ `basename $item` = "hostedx115.rbf" ] ; then
	md5sum --check - <<- EOF
$FPGA115CHECKSUM  $tdir/`basename $item`
EOF
	sha256sum --check - <<- EOF
$FPGA115SHA256SUM  $tdir/`basename $item`
EOF
    fi
    if [ `basename $item` = "hostedxa4.rbf" ] ; then
	md5sum --check - <<- EOF
$FPGAA4CHECKSUM  $tdir/`basename $item`
EOF
	sha256sum --check - <<- EOF
$FPGAA4SHA256SUM  $tdir/`basename $item`
EOF
    fi
    if [ `basename $item` = "hostedxa5.rbf" ] ; then
	md5sum --check - <<- EOF
$FPGAA5CHECKSUM  $tdir/`basename $item`
EOF
	sha256sum --check - <<- EOF
$FPGAA5SHA256SUM  $tdir/`basename $item`
EOF
    fi
    if [ `basename $item` = "hostedxa9.rbf" ] ; then
	md5sum --check - <<- EOF
$FPGAA9CHECKSUM  $tdir/`basename $item`
EOF
	sha256sum --check - <<- EOF
$FPGAA9SHA256SUM  $tdir/`basename $item`
EOF
    fi
    cp -p $tdir/`basename $item` $imagedir/`basename $item`
done

for file in `ls $imagedir`; do md5sum $imagedir/$file ; done
rm -i -rf $tdir

exit 0
